// DO NOT EDIT THIS FILE!!!
// Make a copy for yourself and work on it there

var data = require('./Solution.js');
var h = require('./Helper.js');

var currDrone = 0;

function checkWH(wh, id, num) {
    return data.warehouses[wh].products[id] >= num;
}

function takeFromWH(wh, id, num) {
    data.warehouses[wh].products[id] = data.warehouses[wh].products[id] - num;
}

var commandCounter = 0;

setTimeout(function () {

    var droneID = 0;

    for (var orderID = 0; orderID < 200; orderID++) {

        var order = data.orders[orderID];

        var prods = {};

        var totalProds = 0;

        for (var prod = 0; prod < order.productsNum; prod++) {
            var prodID = order.productsIDs[prod];
            totalProds++;
            if (prods[prodID] == null)
                prods[prodID] = 1;
            else
                prods[prodID]++;
        }

        droneLoop : for (droneID = droneID; droneID < data.drones; droneID++) {
            var currentWeight = 0;
            var currentStore = {};
            var prodsCopy = {};
            for(var k in prods) prodsCopy[k]=prods[k];
            prodLoop : for (var key in prods) {
                if (!prods.hasOwnProperty(key)) continue;
                var productID = key;
                var amount = prods[key];
                if(amount <= 0) continue;
                var prodWeight = data.products[productID] * amount;
                if(currentWeight + prodWeight > data.payload) {
                    for (var deliverID in currentStore) {
                        if (!currentStore.hasOwnProperty(deliverID)) continue;
                        var deliverAmount = currentStore[deliverID];
                        h.deliver(droneID, orderID, deliverID, deliverAmount);
                        commandCounter++;
                    }
                    continue droneLoop;
                } else {
                    currentWeight += prodWeight;
                    currentStore[productID] = amount;
                }
                for (var currWH = 0; currWH < data.warehousesNum; currWH++) {
                    if(checkWH(currWH, productID, amount)) {
                        takeFromWH(currWH, productID, amount);
                        currentStore[productID] = amount;
                        prods[productID] = 0;
                        h.load(droneID, currWH, productID, amount);
                        commandCounter++;
                        totalProds -= amount;
                        break;
                    }
                }
                if(totalProds <= 0) {
                    for (var deliverID in currentStore) {
                        if (!currentStore.hasOwnProperty(deliverID)) continue;
                        var deliverAmount = currentStore[deliverID];
                        h.deliver(droneID, orderID, deliverID, deliverAmount);
                        commandCounter++;
                    }
                    break droneLoop;
                }
            }
        }

    }
    console.log(commandCounter);

}, 400)